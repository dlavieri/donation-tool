[{"/Users/davidlavieri/.npm-global/donation-manager/src/index.js":"1","/Users/davidlavieri/.npm-global/donation-manager/src/App.js":"2","/Users/davidlavieri/.npm-global/donation-manager/src/data.js":"3","/Users/davidlavieri/.npm-global/donation-manager/src/utils/fetchData.js":"4","/Users/davidlavieri/.npm-global/donation-manager/src/components/Row/Row.jsx":"5","/Users/davidlavieri/.npm-global/donation-manager/src/components/Button/Button.jsx":"6","/Users/davidlavieri/.npm-global/donation-manager/src/components/Table/Table.jsx":"7","/Users/davidlavieri/.npm-global/donation-manager/src/context/modalCtx.js":"8","/Users/davidlavieri/.npm-global/donation-manager/src/context/donationsCtx.js":"9","/Users/davidlavieri/.npm-global/donation-manager/src/components/Modal/Modal.jsx":"10","/Users/davidlavieri/.npm-global/donation-manager/src/hooks/useOnClickOutside.js":"11"},{"size":220,"mtime":1611184699317,"results":"12","hashOfConfig":"13"},{"size":1756,"mtime":1611264746497,"results":"14","hashOfConfig":"13"},{"size":3083,"mtime":1611245064888,"results":"15","hashOfConfig":"13"},{"size":174,"mtime":1611187977210,"results":"16","hashOfConfig":"13"},{"size":1813,"mtime":1611252070351,"results":"17","hashOfConfig":"13"},{"size":373,"mtime":1611250681025,"results":"18","hashOfConfig":"13"},{"size":411,"mtime":1611253767863,"results":"19","hashOfConfig":"13"},{"size":103,"mtime":1611249650051,"results":"20","hashOfConfig":"13"},{"size":111,"mtime":1611249633484,"results":"21","hashOfConfig":"13"},{"size":2956,"mtime":1611253418489,"results":"22","hashOfConfig":"13"},{"size":581,"mtime":1611249698170,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2h8zew",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/davidlavieri/.npm-global/donation-manager/src/index.js",[],"/Users/davidlavieri/.npm-global/donation-manager/src/App.js",[],"/Users/davidlavieri/.npm-global/donation-manager/src/data.js",[],"/Users/davidlavieri/.npm-global/donation-manager/src/utils/fetchData.js",[],["49","50"],"/Users/davidlavieri/.npm-global/donation-manager/src/components/Row/Row.jsx",["51"],"import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport Button from '../Button/Button';\n// import fetchData from '../../utils/fetchData';\nimport modalCtx from '../../context/modalCtx';\nimport donationsCtx from '../../context/donationsCtx';\n\nconst Row = ({ name, address, amount, _id, altColor }) => {\n    const [ modal, setModal ] = useContext(modalCtx);\n    const [ donations, setDonations ] = useContext(donationsCtx)\n\n    const classnames = cn({\n        'cell': true,\n        'alt-color': altColor\n    })\n\n    function formatAddress(fullAddress) {\n        return address.split(',')[0]\n    }\n\n    function handleSend() {\n        // post check data to API\n        // const date = new Date();\n        // const data = fetchData(`https://givelively.api/nonprofit/${_id}/checks`, { method: 'POST', body: { datePosted: date, amount: amount}});\n        // if (data.ok) {\n        let updatedDonations = [...donations].filter(d => d._id !== _id);\n        setDonations(updatedDonations);\n        // } else { throw Error('Error posting to API')}\n    }\n\n    function handleEdit() {\n        setModal({ open: true, id: _id });\n    }\n\n    return (\n        <tr className=\"row\">\n            <td className={classnames}>{name}</td>\n            <td className={classnames}>{formatAddress(address)}</td>\n            <td className={classnames}>${amount}</td>\n            <td className=\"cell btn\">\n                <Button\n                    primary={false}\n                    onClick={handleEdit}>\n                    Edit\n                </Button>\n            </td>\n            <td className=\"cell btn\">\n                <Button\n                    primary\n                    onClick={handleSend}>\n                    Send\n                </Button>\n            </td>\n        </tr>\n    )\n}\n\nexport default Row;","/Users/davidlavieri/.npm-global/donation-manager/src/components/Button/Button.jsx",[],"/Users/davidlavieri/.npm-global/donation-manager/src/components/Table/Table.jsx",[],"/Users/davidlavieri/.npm-global/donation-manager/src/context/modalCtx.js",[],"/Users/davidlavieri/.npm-global/donation-manager/src/context/donationsCtx.js",[],"/Users/davidlavieri/.npm-global/donation-manager/src/components/Modal/Modal.jsx",["52","53"],"import React, { useRef, useContext, useEffect, useState } from 'react';\nimport fetchData from '../../utils/fetchData';\nimport useOnClickOutside from '../../hooks/useOnClickOutside';\nimport modalCtx from '../../context/modalCtx';\nimport donationsCtx from '../../context/donationsCtx';\n\nconst Modal = () => {\n    const [ modal, setModal ] = useContext(modalCtx);\n    const [ donations, setDonations ] = useContext(donationsCtx);\n    const [ street, setStreet ] = useState('')\n    const [ city, setCity ] = useState('')\n    const [ state, setState ] = useState('')\n    const [ zip, setZip ] = useState('')\n\n    const modalRef = useRef(null)\n\n    useOnClickOutside(modalRef, () => setModal({...modal, open: false}))\n\n    useEffect(() => {\n        if (modal.id) {\n            let selectedOrg = donations.filter(d => d._id === modal.id)[0];\n            let splitAddress = selectedOrg.address.split(',');\n            setStreet(splitAddress[0]);\n            setCity(splitAddress[1]);\n            setState(splitAddress[2]);\n            setZip(splitAddress[3]);\n        }\n\n    }, [modal])\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        // post new address data to API\n        let address = [street, city, state, zip].join(',');\n        // const data = fetchData(`https://givelively.api/nonprofit/${_id}`, { method: 'PUT', body: { address: address}});\n        // if (data.ok) {\n        let update = [...donations].map(donation => {\n            if (donation._id === modal.id) {\n                donation.address = address;\n            }\n            return donation\n        });\n        setDonations(update);\n        setModal({...modal, open: false})\n    }\n\n\n    return (\n        <>\n            <div className=\"modal\" id=\"modal\" ref={modalRef}>\n                <form>\n                    <div className=\"form-row\">\n                        <label htmlFor=\"street\">Street Address</label>\n                        <input value={street} name=\"street\" onChange={(e) => setStreet(e.target.value)}/>\n                    </div>\n                    <div className=\"form-row\">\n                        <label htmlFor=\"city\">City</label>\n                        <input value={city} name=\"city\" onChange={(e) => setCity(e.target.value)}/>\n                    </div>\n                    <div className=\"form-row\">\n                        <label htmlFor=\"state\">State/Province</label>\n                        <input value={state} name=\"state\" onChange={(e) => setState(e.target.value)}/>\n                    </div>\n                    <div className=\"form-row\">\n                        <label htmlFor=\"zip\">Zipcode</label>\n                        <input value={zip} name=\"zip\" onChange={(e) => setZip(e.target.value)}/>\n                    </div>\n                    <button className=\"btn primary\" onClick={handleSubmit}>Submit</button>\n                </form>\n            </div>\n            <div className=\"modal-shadow\"/>\n        </>\n    )\n}\n\nexport default Modal;","/Users/davidlavieri/.npm-global/donation-manager/src/hooks/useOnClickOutside.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":9,"column":13,"nodeType":"60","messageId":"61","endLine":9,"endColumn":18},{"ruleId":"58","severity":1,"message":"62","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},{"ruleId":"63","severity":1,"message":"64","line":29,"column":8,"nodeType":"65","endLine":29,"endColumn":15,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'modal' is assigned a value but never used.","Identifier","unusedVar","'fetchData' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'donations'. Either include it or remove the dependency array.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [donations, modal]",{"range":"72","text":"73"},[1070,1077],"[donations, modal]"]